{"version":3,"file":"bundle.js","sources":["../src/error.js","../src/index.js","../src/validators/validateOptions.js","../src/validators/validateSelector.js","../src/validators/validateSubject.js","../src/validators/validateText.js","../src/commands/shadowTrigger/validators.js","../src/constants.js","../src/commands/shadowTrigger/command.js","../src/helpers/resolveValue.js","../src/commands/shadowClick/command.js","../src/commands/shadowContains/command.js","../src/commands/shadowEq/command.js","../src/validators/validateNumberInRange.js","../src/commands/shadowFind/command.js","../src/commands/shadowFirst/command.js","../src/commands/shadowGet/command.js","../src/commands/shadowLast/command.js","../src/commands/shadowType/command.js"],"sourcesContent":["export const ERR_TYPES = {\n  INVALID_SUBJECT: {\n    message: '\"subject\" element is not valid',\n    tip: 'It should be a valid DOM (or shadow DOM) element',\n  },\n  INVALID_EVENT_NAME: {\n    message: '\"eventName\" is not valid',\n    tip: 'Please look into docs to find supported \"eventName\" values',\n  },\n  INVALID_OPTIONS: {\n    message: '\"options\" are not valid',\n    tip: 'Please look into docs to find supported \"options\" values',\n  },\n  INVALID_SELECTOR: {\n    message: 'Selector is not valid',\n    tip: 'You should provide a non-empty selector string',\n  },\n  INVALID_SELECTOR_NO_MULTI: {\n    message: 'Selector must be single',\n    tip: 'In case if you need multiple please chain it with .shadowFind() command',\n  },\n  INVALID_SELECTOR_NO_ALIAS: {\n    message: 'Selecting by alias is not supported',\n    tip: 'You must use only string-based selectors',\n  },\n  INVALID_INDEX_NUMBER: {\n    message: 'Index number is not valid',\n    tip: 'It should be a positive or negative number within a range of collection',\n  },\n  INVALID_TEXT_CONTENT: {\n    message: 'Text content is not valid',\n    tip: 'Text content is a string containing at least one symbol',\n  },\n};\n\nexport class InternalError extends Error {\n  constructor(errorType, ...params) {\n    super(...params);\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, InternalError);\n    }\n\n    this.name = '[cypress-shadow-dom error]';\n    this.message = `${errorType.message}.\\n${errorType.tip}`;\n  }\n}\n","import {\n  shadowClick,\n  shadowContains,\n  shadowEq,\n  shadowFind,\n  shadowFirst,\n  shadowGet,\n  shadowLast,\n  shadowTrigger,\n  shadowType,\n} from './commands';\n\nexport default () => {\n  const commandOptions = { prevSubject: true };\n\n  Cypress.Commands.add('shadowClick', commandOptions, shadowClick);\n  Cypress.Commands.add('shadowContains', commandOptions, shadowContains);\n  Cypress.Commands.add('shadowEq', commandOptions, shadowEq);\n  Cypress.Commands.add('shadowFind', commandOptions, shadowFind);\n  Cypress.Commands.add('shadowFirst', commandOptions, shadowFirst);\n  Cypress.Commands.add('shadowGet', { prevSubject: false }, shadowGet);\n  Cypress.Commands.add('shadowLast', commandOptions, shadowLast);\n  Cypress.Commands.add('shadowTrigger', commandOptions, shadowTrigger);\n  Cypress.Commands.add('shadowType', commandOptions, shadowType);\n};\n","import { ERR_TYPES, InternalError } from '../error';\n\nexport default (options, defaults) => {\n  if (!options || typeof options !== 'object') {\n    throw new InternalError(ERR_TYPES.INVALID_OPTIONS);\n  }\n\n  Object.keys(options).forEach(optKey => {\n    if (!(optKey in defaults)) {\n      throw new InternalError(ERR_TYPES.INVALID_OPTIONS);\n    }\n  });\n};\n","import { ERR_TYPES, InternalError } from '../error';\n\nexport default selector => {\n  if (!selector || typeof selector !== 'string' || selector.length < 1) {\n    throw new InternalError(ERR_TYPES.INVALID_SELECTOR);\n  }\n};\n","import { InternalError, ERR_TYPES } from '../error';\n\nexport default subject => {\n  if (!subject) {\n    throw new InternalError(ERR_TYPES.INVALID_SUBJECT);\n  }\n};\n","import { ERR_TYPES, InternalError } from '../error';\n\nexport default text => {\n  if (!text || typeof text !== 'string' || text.length < 1) {\n    throw new InternalError(ERR_TYPES.INVALID_TEXT_CONTENT);\n  }\n};\n","import { InternalError, ERR_TYPES } from '../../error';\n\nexport const validateEventName = eventName => {\n  if (!eventName || typeof eventName !== 'string') {\n    throw new InternalError(ERR_TYPES.INVALID_EVENT_NAME);\n  }\n};\n","export const DEFAULT_COMMAND_OPTIONS = Object.freeze({\n  timeout: 4000,\n});\n\nexport const DEFAULT_EVENT_OPTIONS = Object.freeze({\n  force: false,\n  bubbles: true,\n  cancelable: true,\n  composed: true,\n});\n\nexport const DEFAULT_INPUT_TYPING_OPTIONS = Object.freeze({\n  delay: 10,\n});\n","import { validateOptions, validateSubject } from '../../validators';\nimport { validateEventName } from './validators';\nimport { DEFAULT_EVENT_OPTIONS } from '../../constants';\n\nexport default function shadowTrigger(subject, eventName, options = {}) {\n  Cypress._.defaults(options, DEFAULT_EVENT_OPTIONS);\n  validateSubject(subject);\n  validateEventName(eventName);\n  validateOptions(options, DEFAULT_EVENT_OPTIONS);\n\n  Cypress.log({\n    name: 'shadowTrigger',\n    message: eventName,\n    consoleProps: () => ({\n      eventName,\n    }),\n  });\n\n  const event = new CustomEvent(eventName, options);\n  subject[0].dispatchEvent(event);\n\n  return subject;\n}\n","export default function resolveValue(valueGetterFn, options = {}) {\n  return Cypress.Promise.try(valueGetterFn).then(value => {\n    return Cypress.cy.verifyUpcomingAssertions(value, options, {\n      onRetry: () => resolveValue(valueGetterFn, options),\n    });\n  });\n}\n","import shadowTrigger from '../shadowTrigger';\n\nexport default function shadowClick(subject, options) {\n  return shadowTrigger(subject, 'click', options);\n}\n","import { validateOptions, validateSubject, validateText } from '../../validators';\nimport { resolveValue } from '../../helpers';\nimport { DEFAULT_COMMAND_OPTIONS } from '../../constants';\n\nexport default function shadowContains(subject, content, options = {}) {\n  Cypress._.defaults(options, DEFAULT_COMMAND_OPTIONS);\n  validateSubject(subject);\n  validateText(content);\n  validateOptions(options, DEFAULT_COMMAND_OPTIONS);\n\n  const selector = `:contains(${content})`;\n\n  const elGetter = () => {\n    const found = subject.is(selector) ? subject : Cypress.$(selector, subject);\n\n    if (found.length) {\n      return found;\n    }\n\n    return Array.from(subject).reduce((result, sub) => {\n      if (sub.shadowRoot) {\n        return result.add(selector, sub.shadowRoot);\n      }\n      return result;\n    }, Cypress.$([]));\n  };\n\n  return resolveValue(elGetter, options).then(element => {\n    Cypress.log({\n      name: 'shadowContains',\n      message: `'${content}'`,\n      consoleProps: () => ({ content, element }),\n    });\n\n    return element;\n  });\n}\n","import { validateNumberInRange, validateOptions, validateSubject } from '../../validators';\nimport { resolveValue } from '../../helpers';\nimport { DEFAULT_COMMAND_OPTIONS } from '../../constants';\n\nexport default function shadowEq(subject, index, options = {}) {\n  Cypress._.defaults(options, DEFAULT_COMMAND_OPTIONS);\n  validateSubject(subject);\n  validateNumberInRange(index, [-subject.length, +subject.length]);\n  validateOptions(options, DEFAULT_COMMAND_OPTIONS);\n\n  const elGetter = () => subject[index < 0 ? subject.length + index : index];\n\n  return resolveValue(elGetter, options).then(element => {\n    Cypress.log({\n      name: 'shadowEq',\n      message: `':nth-child(${index})'`,\n      consoleProps: () => ({\n        index,\n        element,\n      }),\n    });\n\n    return element;\n  });\n}\n","import { ERR_TYPES, InternalError } from '../error';\n\nexport default (number, [min, max]) => {\n  if (typeof number !== 'number' || number < min || number > max) {\n    throw new InternalError(ERR_TYPES.INVALID_INDEX_NUMBER);\n  }\n};\n","import { validateOptions, validateSelector, validateSubject } from '../../validators';\nimport { resolveValue } from '../../helpers';\nimport { DEFAULT_COMMAND_OPTIONS } from '../../constants';\n\nexport default function shadowFind(subject, selector, options = {}) {\n  Cypress._.defaults(options, DEFAULT_COMMAND_OPTIONS);\n  validateSubject(subject);\n  validateSelector(selector);\n  validateOptions(options, DEFAULT_COMMAND_OPTIONS);\n\n  const elGetter = () => {\n    const found = Cypress.$(selector, subject);\n\n    if (found.length) {\n      return found;\n    }\n\n    return Array.from(subject).reduce((result, sub) => {\n      if (sub.shadowRoot) {\n        const childEl = [].map.call(sub.shadowRoot.children, el => Cypress.$(el)).find(el => el.is(selector));\n\n        if (childEl && childEl.length) {\n          return result.add(childEl);\n        }\n\n        const f = Cypress.$(sub.shadowRoot.children).find(selector);\n\n        return result.add(f);\n      }\n      return result;\n    }, Cypress.$([]));\n  };\n\n  return resolveValue(elGetter, options).then(foundElements => {\n    Cypress.log({\n      name: 'shadowFind',\n      message: `'${selector}'`,\n      consoleProps: () => ({\n        selector,\n        foundElements,\n      }),\n    });\n\n    return foundElements;\n  });\n}\n","import { validateOptions, validateSubject } from '../../validators';\nimport { resolveValue } from '../../helpers';\nimport { DEFAULT_COMMAND_OPTIONS } from '../../constants';\n\nexport default function shadowFirst(subject, options = {}) {\n  Cypress._.defaults(options, DEFAULT_COMMAND_OPTIONS);\n  validateSubject(subject);\n  validateOptions(options, DEFAULT_COMMAND_OPTIONS);\n\n  const elGetter = () => subject[0];\n\n  return resolveValue(elGetter, options).then(element => {\n    Cypress.log({\n      name: 'shadowFirst',\n      consoleProps: () => ({ element }),\n    });\n\n    return element;\n  });\n}\n","import { validateOptions, validateSelector } from '../../validators';\nimport resolveValue from '../../helpers/resolveValue';\n\nimport { DEFAULT_COMMAND_OPTIONS } from '../../constants';\n\nexport default (selector, options = {}) => {\n  Cypress._.defaults(options, DEFAULT_COMMAND_OPTIONS);\n  validateSelector(selector);\n  validateOptions(options, DEFAULT_COMMAND_OPTIONS);\n\n  const elGetter = () => Cypress.$(selector);\n\n  return resolveValue(elGetter, options).then(element => {\n    Cypress.log({\n      name: 'shadowGet',\n      message: `'${selector}'`,\n      consoleProps: () => ({ selector, element }),\n    });\n\n    return element;\n  });\n};\n","import { validateOptions, validateSubject } from '../../validators';\nimport { resolveValue } from '../../helpers';\nimport { DEFAULT_COMMAND_OPTIONS } from '../../constants';\n\nexport default function shadowLast(subject, options = {}) {\n  Cypress._.defaults(options, DEFAULT_COMMAND_OPTIONS);\n  validateSubject(subject);\n  validateOptions(options, DEFAULT_COMMAND_OPTIONS);\n\n  const elGetter = () => subject[subject.length - 1];\n\n  return resolveValue(elGetter, options).then(element => {\n    Cypress.log({\n      name: 'shadowLast',\n      consoleProps: () => ({ element }),\n    });\n\n    return element;\n  });\n}\n","import { validateOptions, validateSubject, validateText } from '../../validators';\nimport { DEFAULT_INPUT_TYPING_OPTIONS } from '../../constants';\n\nexport default (subject, text, options = {}) => {\n  Cypress._.defaults(options, DEFAULT_INPUT_TYPING_OPTIONS);\n  validateSubject(subject);\n  validateText(text);\n  validateOptions(options, DEFAULT_INPUT_TYPING_OPTIONS);\n\n  const { delay } = options;\n\n  return Cypress.cy.document({ log: false }).then(async document => {\n    Cypress.log({\n      name: 'shadowType',\n      message: text,\n      consoleProps: () => ({\n        text,\n      }),\n    });\n\n    return Cypress.Promise.all(\n      text.split('').map(char => {\n        return new Promise(resolve => {\n          const eventOpts = {\n            key: char,\n            code: char.charCodeAt(0),\n          };\n\n          const keyDownEvent = new KeyboardEvent('keydown', eventOpts);\n          document.dispatchEvent(keyDownEvent);\n          const keyPressEvent = new KeyboardEvent('keydown', eventOpts);\n          document.dispatchEvent(keyPressEvent);\n          const keyUpEvent = new KeyboardEvent('keyup', eventOpts);\n          document.dispatchEvent(keyUpEvent);\n\n          /* eslint-disable-next-line no-param-reassign */\n          subject[0].value += char;\n          const inputEvent = new Event('input', {\n            bubbles: true,\n            cancelable: true,\n            composed: true,\n          });\n          subject[0].dispatchEvent(inputEvent);\n\n          setTimeout(resolve, delay);\n        });\n      }),\n    )\n      .then(\n        () =>\n          new Promise(resolve => {\n            const changeEvent = new Event('change', {\n              bubbles: true,\n              cancelable: true,\n              composed: true,\n            });\n            subject[0].dispatchEvent(changeEvent);\n\n            setTimeout(resolve, delay);\n          }),\n      )\n      .then(() => subject);\n  });\n};\n"],"names":["const","commandOptions","ERR_TYPES","message","tip","InternalError","constructor","errorType","params","Error","captureStackTrace","this","name","options","defaults","Object","keys","forEach","optKey","selector","length","subject","text","validateEventName","eventName","DEFAULT_COMMAND_OPTIONS","freeze","timeout","DEFAULT_EVENT_OPTIONS","force","bubbles","cancelable","composed","DEFAULT_INPUT_TYPING_OPTIONS","delay","shadowTrigger","Cypress","_","validateSubject","validateOptions","log","consoleProps","event","CustomEvent","dispatchEvent","resolveValue","valueGetterFn","Promise","try","then","value","cy","verifyUpcomingAssertions","onRetry","prevSubject","Commands","add","content","validateText","found","is","$","Array","from","reduce","result","sub","shadowRoot","element","index","number","validateNumberInRange","validateSelector","childEl","map","call","children","el","find","f","foundElements","document","all","split","char","resolve","eventOpts","key","code","charCodeAt","keyDownEvent","KeyboardEvent","keyPressEvent","keyUpEvent","inputEvent","Event","setTimeout","changeEvent"],"mappings":"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"}